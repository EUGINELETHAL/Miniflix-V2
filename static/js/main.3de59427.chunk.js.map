{"version":3,"sources":["Nav.js","Search.js","Movie.js","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","Fragment","className","href","src","Search","props","id","onSubmit","type","name","placeholder","onChange","Movie","image","alt","cast","MovieList","event","preventDefault","fetch","state","searchTerm","then","data","json","console","log","setState","movies","results","target","value","res","this","map","movie","key","poster_path","overview","year","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QA6BeA,G,KA1BH,WACV,OACE,kBAAC,IAAMC,SAAP,KACA,4BAAQC,UAAU,YACd,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,kBACZ,4BAAI,uBAAGC,KAAK,GAAGD,UAAU,gBAArB,aACJ,4BAAI,uBAAGC,KAAK,IAAR,SACJ,4BAAI,uBAAGA,KAAK,IAAR,YAGN,wBAAID,UAAU,+BACZ,4BACE,yBAAKA,UAAU,SACb,yBAAKE,IAAI,4ECYZC,EA5BA,SAACC,GACZ,OAEJ,yBAAKJ,UAAU,8CACP,yBAAKA,UAAU,aACb,wBAAIA,UAAU,kBACZ,uBAAGA,UAAU,iBADf,qCAGA,0BAAMK,GAAG,aAAaC,SAAUF,EAAME,UACpC,2BACEC,KAAK,OACLP,UAAU,eACVQ,KAAK,aACLC,YAAY,+BACZC,SAAUN,EAAMM,WAChB,6BACF,4BAAQH,KAAK,SAASP,UAAU,+BAAhC,cCeGW,EA/BD,SAACP,GACX,OACK,yBAAKJ,UAAU,iBAChB,yBAAKA,UAAU,4CAOP,yBAAKA,UAAU,gBAAgBE,IAAG,wCAAmCE,EAAMQ,OAASC,IAAI,mBAIxF,wBAAIb,UAAU,yBACjBI,EAAMU,SC2CJC,E,YApDb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAuBRE,SAAW,SAACU,GACVA,EAAMC,iBACNC,MAAM,4FAAD,OAA6F,EAAKC,MAAMC,aAC5GC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAACC,OAAO,YAAKL,EAAKM,eA9BjB,EAkCnBlB,SAAW,SAACM,GACV,EAAKU,SAAS,CAACN,WAAYJ,EAAMa,OAAOC,SAjCxC,EAAKX,MAAQ,CACbQ,OAAO,GACPP,WAAW,IAJM,E,iFASE,IAAD,OAClBF,MAAM,uFACHG,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAC,GAAI,OACN,EAAKI,SAAS,CACZC,OAAO,YAAIL,EAAKM,gB,+BAyBtB,IAAMD,EAAOK,KAAKb,MAAMQ,OAAOM,KAAI,SAACC,GAAD,OAAU,kBAAE,EAAF,CAAQC,IAAKD,EAAM7B,GAAIO,MAAOsB,EAAME,YAAaC,SAAUH,EAAMpB,KAAMwB,KAAMJ,EAAMI,UAElI,OACF,6BACK,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUhC,SAAU0B,KAAK1B,SAAUI,SAAUsB,KAAKtB,WAAW,6BAE7DiB,O,GAhDkBY,aCJJC,E,iLAEjB,OACE,6BACA,kBAAC,EAAD,W,GAJ2BD,aCUbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.3de59427.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport './App.css'\nconst Nav = () => {\n  return (\n    <React.Fragment>\n    <header className=\"clearfix\">\n        <nav className=\"navbar navbar-default\">\n          <div className=\"container\">            \n            <ul className=\"nav navbar-nav\">    \n              <li><a href=\"\" className=\"navbar-brand\">Miniflix</a></li>          \n              <li><a href=\"\">Home</a></li>\n              <li><a href=\"\">Browse</a></li>\n             \n            </ul>\n            <ul className=\"nav navbar-nav navbar-right\">\n              <li>\n                <div className=\"inset\">\n                  <img src=\"http://rs775.pbsrc.com/albums/yy35/PhoenyxStar/link-1.jpg~c200\"/>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </nav>\n    </header>\n    </React.Fragment>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport './App.css';\nconst Search = (props) => {\n    return (\n\n<div className=\"jumbotron jumbotron-fluid mt-5 text-center\">\n        <div className=\"container\">\n          <h1 className=\"display-4 mb-3\">\n            <i className=\"fa fa-search\" /> Search for a movie ,TV series ..\n          </h1>\n          <form id=\"searchForm\" onSubmit={props.onSubmit}>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"searchText\"\n              placeholder=\"Search Movies, TV Series ...\"\n              onChange={props.onChange}\n            /><br></br>\n            <button type=\"submit\" className=\"btn btn-primary btn-bg mt-3\">\n              Search\n            </button>\n          </form>\n        </div>\n      </div>\n\n\n\n    )\n}\n\nexport default Search\n\n","import React from 'react'\nimport './App.css'\nconst Movie = (props) => {\n    return (\n         <div className=\"col-md-3 mb-5\">\n        <div className=\"card card-body bg-dark text-center h-100\">\n\n\n            \n               \n\n\n                <img className=\"image-styling\" src={`http://image.tmdb.org/t/p/w185${props.image}`} alt=\"Card image cap\"   />\n                \n\n                \n                <h5 className=\"text-light card-title\">\n            {props.cast}\n          </h5>\n                \n\n                \n\n\n\n\n       \n</div>\n</div>\n\n )\n}\n\nexport default Movie\n","import React, { Component } from 'react';\nimport Nav from './Nav'\nimport Search from './Search'\n\nimport Movie from './Movie'\n\n class MovieList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    movies:[],\n    searchTerm:\"\"\n\n    };\n    // this.apiKey = process.env.REACT_APP_API\n  }\n  componentDidMount() {\n    fetch('https://api.themoviedb.org/3/movie/popular?api_key=0ea2b1048640167f7abb52a7eff8d3ca')\n      .then(res => res.json())\n      .then(data => \n          this.setState({\n            movies:[...data.results]\n          }));\n        }\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n\n\n\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=0ea2b1048640167f7abb52a7eff8d3ca&query=${this.state.searchTerm}`)\n    .then(data => data.json())\n    .then(data =>{\n      console.log(data);\n      this.setState({movies: [...data.results]})\n    })\n  }\n\n  onChange = (event) => {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  render() {\n      const movies=this.state.movies.map((movie)=>(< Movie key={movie.id} image={movie.poster_path} overview={movie.cast} year={movie.year}/>\n        ));\n    return (\n \t<div>\n       <Nav />\n       <Search   onSubmit={this.onSubmit} onChange={this.onChange}/><br></br>\n\n      {movies} \n      </div>\n    )\n  }\n}\n\nexport default MovieList\n\n\n\n\n\n\n\n\n\n// import React from 'react'\n\n// const MovieList = (props) => {\n//     return (\n//         <div className=\"container\">    \n//             <div className=\"row\">\n//                 <div className=\"col s12\">  \n//             {\n//              props.movies.map((movie, i) => {\n//                 return (\n                                      \n//                 )\n//             })\n//             }\n//             </div>\n//         </div>\n//     </div>\n// )\n// }\n\n","import React, { Component } from 'react'\nimport MovieList from './MovieList'\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n      <MovieList/>\n        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}