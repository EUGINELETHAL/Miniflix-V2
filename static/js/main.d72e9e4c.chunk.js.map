{"version":3,"sources":["Nav.js","Search.js","Movie.js","MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Nav","class","href","id","Search","props","className","action","onSubmit","type","placeholder","name","onChange","Movie","image","src","alt","style","width","height","MovieList","movies","map","movie","i","key","poster_path","date","release_date","App","event","preventDefault","fetch","apiKey","state","searchTerm","then","data","json","console","log","setState","results","target","value","process","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA2BeA,EArBH,WACV,OACE,6BAEF,6BACE,yBAAKC,MAAM,eACT,uBAAGC,KAAK,IAAKD,MAAM,cAAnB,YACA,wBAAIE,GAAG,aAAaF,MAAM,8BACxB,4BAAI,uBAAGC,KAAK,aAAR,SACJ,4BAAI,uBAAGA,KAAK,eAAR,eACJ,4BAAI,uBAAGA,KAAK,oBAAR,oBCAGE,G,MAdA,SAACC,GACZ,OAEJ,yBAAKC,UAAU,aAEf,0BAAML,MAAM,UAAUM,OAAO,mBAAmBC,SAAUH,EAAMG,UAC9D,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,KAAK,UAAUC,SAAUP,EAAMO,WACzE,4BAAQH,KAAK,UAAS,uBAAGR,MAAM,sBCYlBY,EAnBD,SAACR,GACX,OAEO,yBAAKC,UAAU,iBACd,yBAAKL,MAAM,QACP,yBAAKA,MAAM,mDAEM,MAAfI,EAAMS,MAAgB,yBAAKR,UAAU,GAAGS,IAAG,0EAA6EC,IAAI,iBAAiBC,MAAO,CAAEC,MAAO,OACvJC,OAAQ,OAAS,yBAAKb,UAAU,GAAGS,IAAG,wCAAmCV,EAAMS,OAASE,IAAI,iBAAiBC,MAAO,CAAEC,MAAO,OAC7HC,OAAQ,WCSjBC,EAlBG,SAACf,GACf,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WAElBD,EAAMgB,OAAOC,KAAI,SAACC,EAAOC,GACtB,OACI,kBAAC,EAAD,CAAOC,IAAKF,EAAMpB,GAAIW,MAAOS,EAAMG,YAAaC,KAAMJ,EAAMK,sBCL3DC,E,YAEnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAQRG,SAAW,SAACsB,GACVA,EAAMC,iBACNC,MAAM,qDAAD,OAAsD,EAAKC,OAA3D,kBAA2E,EAAKC,MAAMC,aAC1FC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAACpB,OAAO,YAAKgB,EAAKK,eAfjB,EAmBnB9B,SAAW,SAACkB,GACV,EAAKW,SAAS,CAACN,WAAYL,EAAMa,OAAOC,SAlBxC,EAAKV,MAAQ,CACbb,OAAO,GACPc,WAAW,IAGX,EAAKF,OAASY,mCAPG,E,sEAwBjB,OACI,6BACD,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUrC,SAAUsC,KAAKtC,SAAUI,SAAUkC,KAAKlC,WACnD,kBAAE,EAAF,CAAYS,OAAQyB,KAAKZ,MAAMb,c,GA9BJ0B,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.d72e9e4c.chunk.js","sourcesContent":["import React from 'react'\n\n\n\n\n\nconst Nav = () => {\n  return (\n    <div>\n      \n  <nav>\n    <div class=\"nav-wrapper\">\n      <a href=\"#\"  class=\"brand-logo\">Miniflix</a>\n      <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n        <li><a href=\"sass.html\">Sass</a></li>\n        <li><a href=\"badges.html\">Components</a></li>\n        <li><a href=\"collapsible.html\">JavaScript</a></li>\n      </ul>\n    </div>\n  </nav>\n        \n  \n\n    </div>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport './App.css';\nconst Search = (props) => {\n    return (\n\n<div className=\"container\">\n\n<form class=\"example\" action=\"/action_page.php\" onSubmit={props.onSubmit} >\n  <input type=\"text\" placeholder=\"Search..\" name=\"search2\" onChange={props.onChange}/>\n  <button type=\"submit\"><i class=\"fa fa-search\"></i></button>\n</form>\n\n        </div>\n    )\n}\n\nexport default Search\n\n\n","import React from 'react'\n\nconst Movie = (props) => {\n    return (\n        \n           <div className=\"col s12 m6 l3\">\n            <div class=\"card\">\n                <div class=\"card-image waves-effect waves-block waves-light\">\n                    \n                { props.image == null ? <img className=\"\" src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"Card image cap\" style={{ width: \"100%\",\n                        height: 360}}/> :<img className=\"\" src={`http://image.tmdb.org/t/p/w185${props.image}`} alt=\"Card image cap\" style={{ width: \"100%\",\n                        height: 360}} />} \n                    \n                    \n                    \n                    </div> \n        </div>\n        </div>\n    )\n}\n\nexport default Movie\n","import React from 'react'\nimport Movie from './Movie'\nconst MovieList = (props) => {\n    return (\n        <div className=\"container\">    \n            <div className=\"row\">\n                <div className=\"col s12\">  \n            {\n             props.movies.map((movie, i) => {\n                return (\n                    <Movie key={movie.id} image={movie.poster_path} date={movie.release_date} />                    \n                )\n            })\n            }\n            </div>\n        </div>\n    </div>\n)\n}\n\nexport default MovieList\n","import React, { Component } from 'react';\nimport Nav from './Nav'\nimport Search from './Search'\nimport MovieList from './MovieList'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    movies:[],\n    searchTerm:\"\"\n\n    };\n    this.apiKey = process.env.REACT_APP_API\n  }\n  onSubmit = (event) => {\n    event.preventDefault();\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}`)\n    .then(data => data.json())\n    .then(data =>{\n      console.log(data);\n      this.setState({movies: [...data.results]})\n    })\n  }\n\n  onChange = (event) => {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  render() {\n    return (\n        <div>\n       <Nav />\n       <Search   onSubmit={this.onSubmit} onChange={this.onChange}/>\n      < MovieList movies={this.state.movies}/>\n      </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}